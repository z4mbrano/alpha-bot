"""
Script de Teste para Validar as Corre√ß√µes do AlphaBot

Testa:
1. Processamento correto de dados (sem converter colunas textuais)
2. C√°lculos financeiros corretos
3. Persist√™ncia de sess√£o no banco de dados
4. Persist√™ncia de mensagens de chat
"""

import pandas as pd
import numpy as np
from src.utils.data_processor import process_dataframe_unified
import database

def test_data_processing():
    """
    Testa se o processamento de dados est√° correto
    """
    print("\n" + "="*60)
    print("TESTE 1: Processamento de Dados")
    print("="*60)
    
    # Criar DataFrame de teste similar ao que causa erro
    test_data = {
        'Data': ['2024-01-15', '2024-02-20', '2024-03-10'],
        'M√™s': ['Janeiro', 'Fevereiro', 'Mar√ßo'],  # COLUNA TEXTUAL - N√ÉO DEVE SER CONVERTIDA
        'Produto': ['Produto A', 'Produto B', 'Produto C'],
        'Quantidade': ['100', '200', '150'],  # STRING que deve virar num√©rico
        'Receita_Total': ['R$ 5.000,00', 'R$ 10.000,00', 'R$ 7.500,00'],  # Formata√ß√£o brasileira
        'Categoria': ['Vendas', 'Marketing', 'Vendas']
    }
    
    df = pd.DataFrame(test_data)
    
    print("\nüìã DataFrame Original:")
    print(df)
    print("\nüìã Tipos Originais:")
    print(df.dtypes)
    
    # Processar
    try:
        processed_df, metadata = process_dataframe_unified(df, source_info="Teste_AlphaBot")
        
        print("\n‚úÖ Processamento conclu√≠do com sucesso!")
        print("\nüìã DataFrame Processado:")
        print(processed_df)
        print("\nüìã Tipos Processados:")
        print(processed_df.dtypes)
        
        # Valida√ß√µes
        print("\nüîç VALIDA√á√ïES:")
        
        # 1. Coluna 'M√™s' deve permanecer textual
        if processed_df['M√™s'].dtype == 'object':
            print("‚úÖ Coluna 'M√™s' permaneceu textual (correto)")
            print(f"   Valores: {processed_df['M√™s'].tolist()}")
        else:
            print(f"‚ùå ERRO: Coluna 'M√™s' foi convertida para {processed_df['M√™s'].dtype}")
            return False
        
        # 2. Coluna 'Quantidade' deve ser num√©rica
        if pd.api.types.is_numeric_dtype(processed_df['Quantidade']):
            print("‚úÖ Coluna 'Quantidade' √© num√©rica (correto)")
            total_qtd = processed_df['Quantidade'].sum()
            print(f"   Total: {total_qtd} (esperado: 450)")
            if total_qtd != 450:
                print(f"‚ùå ERRO: Total incorreto! Esperado 450, obtido {total_qtd}")
                return False
        else:
            print(f"‚ùå ERRO: Coluna 'Quantidade' n√£o √© num√©rica: {processed_df['Quantidade'].dtype}")
            return False
        
        # 3. Coluna 'Receita_Total' deve ser num√©rica
        if pd.api.types.is_numeric_dtype(processed_df['Receita_Total']):
            print("‚úÖ Coluna 'Receita_Total' √© num√©rica (correto)")
            total_receita = processed_df['Receita_Total'].sum()
            print(f"   Total: R$ {total_receita:,.2f} (esperado: R$ 22.500,00)")
            if abs(total_receita - 22500) > 1:  # Toler√¢ncia de R$ 1
                print(f"‚ùå ERRO: Total incorreto! Esperado R$ 22.500,00, obtido R$ {total_receita:,.2f}")
                return False
        else:
            print(f"‚ùå ERRO: Coluna 'Receita_Total' n√£o √© num√©rica: {processed_df['Receita_Total'].dtype}")
            return False
        
        # 4. Verificar metadata
        print("\nüìä Metadata do Processamento:")
        for col, info in metadata.get('columns_processed', {}).items():
            col_type = info.get('type')
            if col_type == 'financial_numeric':
                success_rate = info.get('conversion_success_rate', 0)
                print(f"   {col}: {col_type} ({info.get('original_dtype')} ‚Üí {info.get('final_dtype')}) - {success_rate:.1f}% sucesso")
            elif col_type == 'temporal':
                valid_dates = info.get('valid_dates', 0)
                date_range = info.get('date_range', {})
                print(f"   {col}: {col_type} ({valid_dates} datas v√°lidas, {date_range.get('min')} a {date_range.get('max')})")
            else:
                print(f"   {col}: {col_type} ({info.get('original_dtype')} ‚Üí {info.get('final_dtype')})")
        
        # 5. Verificar se componentes de data foram criados
        date_components = [c for c in processed_df.columns if any(c.endswith(suffix) for suffix in ['_Ano', '_Mes', '_Trimestre', '_Mes_Nome'])]
        if date_components:
            print(f"\nüìÖ Componentes de Data Criados:")
            for comp in date_components:
                print(f"   {comp}: {processed_df[comp].dtype} (amostra: {processed_df[comp].head(3).tolist()})")
        
        # 6. Verificar threshold de convers√£o (agora √© 80%)
        for col, info in metadata.get('columns_processed', {}).items():
            if info.get('type') == 'financial_numeric':
                success_rate = info.get('conversion_success_rate', 0)
                if success_rate < 80:
                    print(f"\n‚ùå ERRO: Coluna '{col}' convertida com taxa de sucesso abaixo de 80% ({success_rate:.1f}%)")
                    return False
        
        print("\n‚úÖ TESTE 1 PASSOU!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO no processamento: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_database_persistence():
    """
    Testa se os dados est√£o sendo persistidos no banco
    """
    print("\n" + "="*60)
    print("TESTE 2: Persist√™ncia no Banco de Dados")
    print("="*60)
    
    # Inicializar banco
    database.init_database()
    
    # Criar sess√£o de teste
    import random
    test_user_id = 999999  # ID de teste
    test_session_id = f"test_session_{random.randint(1000, 9999)}"  # ID √∫nico para cada teste
    
    test_df = pd.DataFrame({
        'Quantidade': [100, 200],
        'Receita': [5000, 10000]
    })
    
    test_metadata = {
        'total_records': 2,
        'total_columns': 2,
        'columns': ['Quantidade', 'Receita']
    }
    
    test_files = ['test_file.csv']
    
    print(f"\nüìù Criando sess√£o de teste: user_id={test_user_id}, session_id={test_session_id}")
    
    # Criar sess√£o
    success = database.create_alphabot_session(
        user_id=test_user_id,
        session_id=test_session_id,
        dataframe_json=test_df.to_json(orient='split'),
        metadata=test_metadata,
        files_info=test_files
    )
    
    if success:
        print("‚úÖ Sess√£o criada com sucesso")
    else:
        print("‚ùå ERRO: Falha ao criar sess√£o")
        return False
    
    # Recuperar sess√£o
    print(f"\nüìñ Recuperando sess√£o...")
    session_data = database.get_alphabot_session(test_user_id, test_session_id)
    
    if session_data:
        print("‚úÖ Sess√£o recuperada com sucesso")
        print(f"   Metadata: {session_data['metadata']}")
        
        # Verificar dados
        recovered_df = pd.read_json(session_data['dataframe'], orient='split')
        print(f"   DataFrame recuperado: {len(recovered_df)} linhas, {len(recovered_df.columns)} colunas")
        
        if len(recovered_df) == 2 and len(recovered_df.columns) == 2:
            print("‚úÖ Dados recuperados corretamente")
        else:
            print(f"‚ùå ERRO: Dados recuperados incorretamente")
            return False
    else:
        print("‚ùå ERRO: Sess√£o n√£o encontrada")
        return False
    
    # Testar mensagens
    print(f"\nüìù Testando persist√™ncia de mensagens...")
    
    test_conv_id = f"test_conv_{random.randint(1000, 9999)}"  # ID √∫nico para cada teste
    
    # Criar conversa
    conv_created = database.create_alphabot_conversation(
        conversation_id=test_conv_id,
        session_id=test_session_id,
        user_id=test_user_id,
        title="Teste de Conversa"
    )
    
    if conv_created:
        print("‚úÖ Conversa criada com sucesso")
    else:
        print("‚ùå ERRO: Falha ao criar conversa")
        return False
    
    # Adicionar mensagem do usu√°rio
    msg_user_saved = database.add_alphabot_message(
        conversation_id=test_conv_id,
        author='user',
        text='Qual o total de receita?',
        time=1234567890000
    )
    
    if msg_user_saved:
        print("‚úÖ Mensagem do usu√°rio salva com sucesso")
    else:
        print("‚ùå ERRO: Falha ao salvar mensagem do usu√°rio")
        return False
    
    # Adicionar mensagem do bot
    msg_bot_saved = database.add_alphabot_message(
        conversation_id=test_conv_id,
        author='bot',
        text='O total de receita √© R$ 15.000,00',
        time=1234567891000
    )
    
    if msg_bot_saved:
        print("‚úÖ Mensagem do bot salva com sucesso")
    else:
        print("‚ùå ERRO: Falha ao salvar mensagem do bot")
        return False
    
    # Recuperar mensagens
    # Como n√£o existe get_alphabot_messages, vamos apenas verificar se salvou
    print(f"‚úÖ Mensagens salvas com sucesso (verifica√ß√£o de recupera√ß√£o n√£o implementada)")
    
    # Limpar dados de teste
    print(f"\nüßπ Limpando dados de teste...")
    # (N√£o implementado para n√£o afetar banco de produ√ß√£o)
    
    print("\n‚úÖ TESTE 2 PASSOU!")
    return True


def main():
    """
    Executa todos os testes
    """
    print("\n" + "="*60)
    print("üß™ TESTES DE VALIDA√á√ÉO DO ALPHABOT")
    print("="*60)
    
    results = []
    
    # Teste 1: Processamento de Dados
    results.append(("Processamento de Dados", test_data_processing()))
    
    # Teste 2: Persist√™ncia no Banco
    results.append(("Persist√™ncia no Banco", test_database_persistence()))
    
    # Resumo
    print("\n" + "="*60)
    print("üìä RESUMO DOS TESTES")
    print("="*60)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
        else:
            failed += 1
    
    print(f"\nTotal: {passed} passaram, {failed} falharam")
    
    if failed == 0:
        print("\nüéâ TODOS OS TESTES PASSARAM! AlphaBot est√° funcionando corretamente.")
        return True
    else:
        print(f"\n‚ö†Ô∏è {failed} teste(s) falharam. Verifique os logs acima.")
        return False


if __name__ == "__main__":
    import sys
    success = main()
    sys.exit(0 if success else 1)
